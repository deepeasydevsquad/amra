name: CI/CD Deploy Amra App

on:
  push:
    branches: [ staging ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      FRONT_IMAGE: muammar88/amra_saas_client:v1.0
      BACK_IMAGE: muammar88/amra_saas_server:v1.0
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      DOCKER_HUB_PASS: ${{ secrets.DOCKER_HUB_PASS }}
      DB_USERNAME_ROOT: ${{ secrets.DB_USERNAME_ROOT_AMRA }}
      DB_PASSWORD_ROOT: ${{ secrets.DB_PASSWORD_ROOT_AMRA }}
      

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Login to DockerHub
        run: echo "$DOCKER_HUB_PASS" | docker login -u "$DOCKER_HUB_USER" --password-stdin

      - name: Build and push client image
        run: |
          docker build -t muammar88/amra_saas_client:v1.0 ./client
          docker push muammar88/amra_saas_client:v1.0

      - name: Build and push backend image
        run: |
          docker build -t muammar88/amra_saas_server:v1.0 ./server
          docker push muammar88/amra_saas_server:v1.0

      - name: Deploy to Ubuntu server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            cd /home/dbmachine/amra

            # Pull latest images
            docker pull muammar88/amra_saas_client:v1.0
            docker pull muammar88/amra_saas_server:v1.0

            # Stop and remove containers if exist
            docker-compose down || true

            # Start services using docker-compose
            docker-compose up -d

            sleep 60

            # Run Sequelize migration and seed scripts
            if docker exec -i mysql_container mysql -u ${{ env.DB_USERNAME_ROOT }} -p${{ env.DB_PASSWORD_ROOT }} -e "DROP DATABASE IF EXISTS amra_db; CREATE DATABASE amra_db;"; then
              if docker exec -i Container_server npx sequelize-cli db:migrate; then
                docker exec -i Container_server npx sequelize-cli db:seed:all --debug
                docker restart Container_server
              else
                echo "⚠️ Gagal menjalankan migration. Skip proses migrate."  
              fi
            else
              echo "⚠️ Gagal menjalankan Menghapus Database."  
            fi  
            
