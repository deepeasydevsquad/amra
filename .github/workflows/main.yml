name: CI/CD Deploy Amra App

on:
  push:
    branches: [ staging ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      FRONT_IMAGE: muammar88/amra_saas_client:v1.0
      BACK_IMAGE: muammar88/amra_saas_server:v1.0
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      DOCKER_HUB_PASS: ${{ secrets.DOCKER_HUB_PASS }}
      DB_USERNAME_ROOT: ${{ secrets.DB_USERNAME_ROOT_AMRA }}
      DB_PASSWORD_ROOT: ${{ secrets.DB_PASSWORD_ROOT_AMRA }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Login to DockerHub
        run: echo "${{ env.DOCKER_HUB_PASS }} " | docker login -u "${{ env.DOCKER_HUB_USER }}" --password-stdin

      - name: Build and push client image
        run: |
          docker build -t ${{ env.FRONT_IMAGE }} ./client
          docker push ${{ env.FRONT_IMAGE }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ env.BACK_IMAGE }} ./server
          docker push ${{ env.BACK_IMAGE }}

      - name: Deploy to Ubuntu server via SSH
        uses: appleboy/ssh-action@v1
        timeout-minutes: 20
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            set -e

            cd /home/dbmachine/amra

            echo "üì¶ Pulling latest images..."
            docker pull ${{ env.FRONT_IMAGE }}
            docker pull ${{ env.BACK_IMAGE }}

            echo "üõë Stopping existing containers..."
            docker-compose down || true

            echo "üöÄ Starting containers..."
            docker-compose up -d

            echo "‚è≥ Waiting for MySQL to be ready..."
            until docker exec mysql_container mysqladmin ping -u"${{ env.DB_USERNAME_ROOT }}" -p"${{ env.DB_PASSWORD_ROOT }}" --silent; do
              echo "   ... still waiting for MySQL"
              sleep 5
            done

            echo "‚è≥ Waiting for Container_server to be running..."
            until [ "$(docker inspect -f '{{.State.Running}}' Container_server)" == "true" ]; do
              echo "   ... still waiting for Container_server"
              sleep 5
            done

            echo "üóë Dropping and creating database..."
            docker exec -i mysql_container mysql -u"${{ env.DB_USERNAME_ROOT }}" -p"${{ env.DB_PASSWORD_ROOT }}" -e "DROP DATABASE IF EXISTS amra_db; CREATE DATABASE amra_db;"

            echo "üìú Running Sequelize migrations..."
            if docker exec -i Container_server npx sequelize-cli db:migrate; then
              echo "üå± Seeding database..."
              docker exec -i Container_server npx sequelize-cli db:seed:all --debug
              echo "üîÑ Restarting Container_server..."
              docker restart Container_server
            else
              echo "‚ö†Ô∏è Migration failed. Skipping seed."
            fi
